data_matrix=as.matrix(dataset)
data_matrix
#Converting dataframe into list
data_list=as.list(dataset)
data_list
#To add new column to data frame
library(dplyr)
dataset2%>%mutate(newcol = NA)
#Reordering Columns in a Data Frame
#Use select() from dplyr:
dataset %>% select(gender, math.score, reading.score,writing.score)
#Getting a Subset of a Data Frame
install.packages("gcookbook")       #installing gcookbook package
library(gcookbook)                  #loading the package
#To keep rows where gender is "male" and where the maths score is inclusive of and between 60 and 100. using filter()  function from gcookbook.
dataset %>% filter(gender == "male" & math.score >= 60 & math.score<= 100)
dataset %>% select(lunch,race.ethnicity)
#Changing the Order of Factor Levels
install.packages("forcats")
library(forcats)#installing forcats package
#To use two vectors, one with the original levels and one with the new ones, use do.call() with fct_recode():
data3mappings <- setNames(dataset$race.ethnicity,dataset$reading.score)
data3mappings
#Removing Unused Levels from a Factor
fct_drop(dataset2$gender)
# Work on a subset of the dataset data set
pg <- dataset[c(1:1000),]
pg
#Calculating New Columns from Existing Columns
#To calculate a new column of values in a data frame.
#Use mutate() from the dplyr package:
data4 <- dataset
data4 %>% mutate(math.score=math.score*2)
#Data normalization
library(MASS)
library(dplyr)
library(gcookbook)
library(ggplot2)
ggplot(dataset, aes(x=reading.score, y=writing.score))+geom_boxplot()
#Summarizing Data by Groups
library(MASS) # Load MASS for the dataset data set
library(dplyr)
summarise(dataset, math.score = mean(math.score))
install.packages("tidyr")
library(tidyr)
ggplot(dataset,aes(x=writing.score, fill=math.score, y=reading.score))+geom_col(position ="dodge")
ggplot(dataset, aes(x=reading.score, y=writing.score))+geom_boxplot()
render("EDA-LA01.Rmd")
render("D:/Academic/Sem VI/EDA-LA01/EDA-LA01/EDA-LA01.Rmd")
# converting character to integer
numrc=as.numeric(dataset$math.score)
numrc
# converting integer to character
numrch=as.character(dataset$reading.score)
numrch
data1=dataset$reading.score     #Assigning reading score values to data1
data1                           #reading values in the data1
length(data1)                   #Getting length of data1
max(data1)                      #Maximum value in the data1
which(data1==max(data1))        #Getting positions of the occurrence of the maximum value of data1
render(EDA-LA01.Rmd)
render("EDA-LA01.Rmd")
which(data1==77)
# Syntax : sequence(starting point , length , no.of interval)
dataset$gender[seq(1,length(dataset$gender),10)]
dataset$reading.score[seq(1,length(dataset$reading.score),20)]
order(dataset)
order(dataset$test.preparation.course)
sort(dataset$gender)              #sorting gender of dataset
sort(dataset$math.score)          #sorting of math scores
sort(dataset[1,])                 #sorting on 1st row and all the columns of dataset
sort(dataset[,1])                 #sorting on 1st column and all rows of dataset
order(dataset)
order(dataset$test.preparation.course)
tail(dataset$lunch,n=10)
dataset2=dataset
sites = c('gender', 'race.ethnicity', 'parental.level.of.education', 'lunch','test.preparation.course', 'math.score', 'reading.score', )
dataset2=dataset
sites = c('gender', 'race.ethnicity', 'parental.level.of.education', 'lunch','test.preparation.course', 'math.score','writing.score', 'reading.score', )
dataset2=dataset
sites = c('gender', 'race.ethnicity', 'parental.level.of.education', 'lunch','test.preparation.course', 'math.score','writing.score', 'reading.score')
rownames(dataset2) = sites
dataset2=dataset
sites = c('gender', 'race.ethnicity', 'parental.level.of.education', 'lunch','test.preparation.course', 'math.score','writing.score', 'reading.score')
row.names(dataset2) = sites
dataset2=dataset
sites = c('gender', 'race.ethnicity', 'parental.level.of.education', 'lunch','test.preparation.course', 'math.score','writing.score', 'reading.score')
`row.names<-`(dataset2,value=sites)
dataset2=dataset
sites = c('gender', 'race.ethnicity', 'parental.level.of.education', 'lunch','test.preparation.course', 'math.score','writing.score', 'reading.score')
rownames(dataset2)=sites
?rownames
dataset2=dataset
sites = c('gender', 'race.ethnicity', 'parental.level.of.education', 'lunch','test.preparation.course', 'math.score','writing.score', 'reading.score')
rownames(dataset2, do.NULL = TRUE, prefix = "row")
rownames(dataset2)=sites
dataset2.t=t(dataset2)
dataset2.t
data_matrix=as.matrix(dataset)
data_matrix
dataset %>% select(gender, math.score, reading.score,writing.score)
library(dplyr)
dataset %>% select(gender, math.score, reading.score,writing.score)
library(dplyr)
dataset %>% select(gender,math.score, reading.score,writing.score)
library(dplyr)
dataset %>% select(gender,math.score, reading.score,writing.score)
library(dplyr)
dataset %>% select( gender,math.score, reading.score,writing.score)
library(dplyr)
dataset2%>%mutate(newcol = NA)
library(dplyr)
dataset %>% select(math.score, reading.score,writing.score)
library(dplyr)
dataset %>% select(.,math.score, reading.score,writing.score)
library(gcookbook)                  # loading the package
library(dplyr)
dataset %>% select( "gender","math.score", "reading.score","writing.score")
dataset %>% filter(gender == "male" & math.score >= 60 & math.score<= 100)
dataset %>% select(lunch,race.ethnicity)
dataset %>% filter(gender == "male" & math.score >= 60 & math.score<= 100)
select(dataset,lunch,race.ethnicity)
dataset %>% filter(gender == "male" & math.score >= 60 & math.score<= 100)
select(dataset,2:4)
dataset %>% filter(gender == "male" & math.score >= 60 & math.score<= 100)
dataset %>% select(2:4)
dataset %>% filter(gender == "male" & math.score >= 60 & math.score<= 100)
# Installing forcats package
library(forcats)
data3mappings <- setNames(dataset$race.ethnicity,dataset$reading.score)
data3mappings
pg <- dataset[c(1:1000),]
pg
data4 <- dataset
data4 %>% mutate(math.score=math.score*2)
ggplot(dataset, aes(x=reading.score, y=writing.score))+geom_boxplot()
ggplot(dataset, aes(x=reading.score, y=writing.score))+geom_boxplot()
summarise(dataset, math.score = mean(math.score))
ggplot(dataset,aes(x=writing.score, fill=math.score, y=reading.score))+geom_col(position ="dodge")
render(EDA-LA01.Rmd)
render("EDA-LA01.Rmd")
dataset <- read.csv("D:/Academic/Sem VI/EDA-LA01/EDA-LA01/test_scores.csv")
dataset$gender
dataset$gender
dataset
dataset
dataset$parental.level.of.education
dataset$lunch
colnames(dataset)
colnames(dataset)
# converting character to integer
numrc=as.numeric(dataset$lunch)
numrc
# converting character to integer
numrc=as.numeric(dataset$student_id)
numrc
# converting character to integer
numrc=as.numeric(dataset$school)
numrc
# converting character to integer
numrc=as.numeric(dataset$school)
head(numrc)
which(data1==77)
# Syntax : sequence(starting point , length , no.of interval)
dataset$n_student[seq(1,length(dataset$n_student),10)]
order(dataset$school_type)
order(dataset$posttest)
sort(dataset$gender)              #sorting gender of dataset
head(sort(dataset$gender))              #sorting gender of dataset
head(sort(dataset$gender),n=30)              #sorting gender of dataset
rank(dataset$student_id) #rank on test course preparation
rank(dataset$school_type)              #rank on math score
data2=head(dataset$posttest,n=10)
math.score.t=t(data2)
math.score.t
data2=with(dataset, order(gender,n_student))
data2
data_list=as.list(dataset)
head(data_list,n=100)
data_matrix=as.matrix(dataset)
head(data_matrix,n=100)
data_list=as.list(dataset)
head(data_list,n=100)
library(dplyr)
dataset2%>%mutate(newcol = NA)
dataset %>% filter(gender == "male" & pretest >= 60 & pretest<= 100)
dataset %>% filter(gender == "male" & pretest >= 20 & pretest<= 100)
dataset2 %>% filter(gender == "male" & pretest >= 20 & pretest<= 100)
library(dplyr)
dataset2%>%mutate(newcol = NA)
dataset %>% filter(gender == "male" & math.score >= 60 & math.score<= 100)
dataset %>% filter(gender == "male" & math.score >= 60 & math.score<= 100)
View(dataset2)
dataset2 %>% filter(gender == "male" & math.score>=60 & math.score<=100)
data3mappings <- setNames(dataset$school_setting,dataset$math.score)
data3mappings
pg <- dataset[c(1:1000),]
pg
pg <- dataset[c(1:10),]
pg
data4 <- dataset
data4 %>% mutate(math.score=math.score*2)
data4 <- dataset
data4 %>% mutate(pretest=pretest*2)
data4 <- dataset
data4 %>% mutate(n_student=n_student*2)
data3mappings <- setNames(dataset$school_setting,dataset$math.score)
data3mappings
dimnames(dataset)               #Getting both rows and columns
names(dataset)                  #Getting all column names of dataset
dataset2=dataset
dataset2.t=t(dataset2)
dataset2.t
data2=head(dataset$posttest,n=10)
math.score.t=t(data2)
math.score.t
data2=head(dataset$posttest,n=10)
math.score.t=t(data2)
math.score.t
data2=head(dataset$posttest,n=10)
math.score.t=t(data2)
math.score.t
data2=head(dataset$posttest,n=10)
post.score.t=t(data2)
post.score.t
dataset2 %>% filter(gender == "male" & posttest>=60 & posttest<=100)
dataset %>% filter(gender == "male" & posttest>=60 & posttest<=100)
data3mappings <- setNames(dataset$school_setting,dataset$n_student)
data3mappings
dataset2 %>% filter(gender == "male" & posttest==60)
dataset2 %>% filter(gender == "male" & posttest==60)
dataset2 %>% filter(posttest==60)
dataset2 %>% filter(gender="Male",posttest==60)
dataset2 %>% filter(gender=="Male",posttest==60)
pg <- dataset[c(1:10),]
pg
data4 <- dataset
data4 %>% mutate(n_student=n_student*2)
ggplot(dataset, aes(x = school_id)) +geom_histogram()
ggplot(dataset, aes(x = pretest)) +geom_histogram()
ggplot(dataset, aes(x = pretest)) +geom_histogram()
ggplot(dataset, aes(x= posttest)) +
geom_histogram(binwidth = 5, fill = "white", colour = "black")
?mean
install.packages("dplyr")
dataset <- read.csv("D:/Academic/Sem VI/EDA-LA01/EDA-LA01/test_scores.csv")
dataset
str(dataset)
class(dataset)
ls(dataset)
dataset$gender
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
render(EDA-LA01.Rmd)
render(EDA-LA01.Rmd)
render("EDA-LA01.Rmd")
ggplot(dataset, aes(x=pretest, y=posttest))+geom_boxplot()
summarise(dataset, math.score = mean(pretest))
ggplot(dataset,aes(x=pretest, fill=n_student, y=posttest))+geom_col(position ="dodge")
ggplot(dataset, aes(x = pretest)) +geom_histogram()
ggplot(dataset, aes(x= posttest)) +
geom_histogram(binwidth = 5, fill = "white", colour = "black")
library(MASS) # Load MASS for the birthwt data set
# Use smoke as the faceting variable
ggplot(dataset, aes(x = n_student)) +geom_histogram(fill = "white", colour = "black") +
facet_grid(smoke ~ .)
library(MASS) # Load MASS for the birthwt data set
# Use smoke as the faceting variable
ggplot(dataset, aes(x = n_student)) +geom_histogram(fill = "white", colour = "black")+facet_grid(smoke ~ .)
library(MASS) # Load MASS for the birthwt data set
# Use smoke as the faceting variable
ggplot(dataset, aes(x = n_student)) +geom_histogram(fill = "white", colour = "black")+facet_grid(pretest ~ .)
library(MASS) # Load MASS for the birthwt data set
# Use smoke as the faceting variable
ggplot(dataset, aes(x = student_id)) +geom_histogram(fill = "white", colour = "black")+facet_grid(pretest ~ .)
library(MASS) # Load MASS for the birthwt data set
# Use smoke as the faceting variable
ggplot(dataset, aes(x = posttest)) +geom_histogram(fill = "white", colour = "black")+facet_grid(pretest ~ .)
library(MASS) # Load MASS for the birthwt data set
# Use smoke as the faceting variable
ggplot(dataset, aes(x = posttest)) +geom_histogram(fill = "white", colour = "black")
ggplot(dataset, aes(x = pretest, fill = posttest)) +
geom_histogram(position = "identity", alpha = 0.4)
ggplot(dataset, aes(x = pretest)) +geom_histogram()
ggplot(dataset, aes(x= posttest)) +
geom_histogram(binwidth = 5, fill = "white", colour = "black")
ggplot(dataset,aes(x=pretest, fill="orange", y=posttest))+geom_col(position ="dodge")
ggplot(dataset,aes(x=pretest, fill=n_student, y=posttest))+geom_col(position ="dodge")
ggplot(dataset, aes(x = pretest, fill ='green' )) +
geom_histogram(position = "identity", alpha = 0.4)
ggplot(dataset, aes(x = pretest, fill ='pretest',colour='red' )) +
geom_histogram(position = "identity", alpha = 0.4)
ggplot(dataset, aes(x = n_student)) +
geom_density()
ggplot(dataset, aes(x = n_student)) +geom_density()
ggplot(dataset, aes(x = n_student)) +geom_density()
# expand_limits() increases the y range to include the value 0
ggplot(dataset, aes(x = n_student)) +geom_line(stat = "density") +expand_limits(y = 0)
ggplot(dataset, aes(x = n_student)) +geom_density()
# expand_limits() increases the y range to include the value 0
ggplot(dataset, aes(x = pretest)) +geom_line(stat = "density") +expand_limits(y = 0)
ggplot(dataset, aes(x = posttest)) +geom_line(stat = "density") +
geom_line(stat = "density", adjust = .25, colour = "red") +
geom_line(stat = "density", adjust = 2, colour = "blue")
ggplot(dataset, aes(x = pretest)) +
geom_density(fill = "blue", alpha = .2, colour = NA) +
xlim(35, 105) +
geom_line(stat = "density")
ggplot(dataset, aes(x = pretest)) +
geom_density(fill = "blue", alpha = .2) +
xlim(35, 105)
ggplot(dataset, aes(x = pretest)) +
geom_density(fill = "blue", alpha = .2, colour = NA) +
xlim(35, 105) +
geom_line(stat = "density")
ggplot(dataset, aes(x = pretest, y = posttest)) +
geom_histogram(fill = "cornsilk", colour = "grey60", size = .2) +
geom_density() +
xlim(35, 105)
ggplot(dataset, aes(x = pretest, y = posttest)) +geom_histogram(fill = "cornsilk", colour = "grey60", size = .2) +geom_density() +xlim(35, 105)
ggplot(dataset, aes(x = pretest, y = ..density..)) +geom_histogram(fill = "cornsilk", colour = "grey60", size = .2) +geom_density() +xlim(35, 105)
data5 <- dataset %>%
mutate(n_student = as.factor(n_student)) # Convert n_student to a factor
# Map n_student to colour
ggplot(data4, aes(x = pretest, colour = smoke)) +geom_density()
data5 <- dataset %>%
mutate(n_student = as.factor(n_student)) # Convert n_student to a factor
# Map n_student to colour
ggplot(data4, aes(x = pretest, colour = red)) +geom_density()
data5 <- dataset %>%
mutate(n_student = as.factor(n_student)) # Convert n_student to a factor
# Map n_student to colour
ggplot(data4, aes(x = pretest, colour = "red")) +geom_density()
# Map n_student to fill and make the fill semitransparent by setting alpha
ggplot(birthwt_mod, aes(x = pretest, fill = pretest)) +
geom_density(alpha = .3)
data5 <- dataset %>%
mutate(n_student = as.factor(n_student)) # Convert n_student to a factor
# Map n_student to colour
ggplot(data5, aes(x = pretest, colour = "red")) +geom_density()
# Map n_student to fill and make the fill semitransparent by setting alpha
ggplot(data5, aes(x = pretest, fill = pretest)) +
geom_density(alpha = .3)
ggplot(dataset, aes(x=pretest)) +
geom_freqpoly()
ggplot(dataset, aes(x=pretest)) +
geom_freqpoly()
ggplot(faithful, aes(x = waiting)) +
geom_freqpoly(binwidth = 4)
binsize <- diff(range(dataset$pretest))/15
ggplot(dataset, aes(x = pretest)) +
geom_freqpoly(binwidth = binsize)
ggplot(dataset, aes(x = factor(n_student), y = pretest)) +
geom_boxplot()
ggplot(dataset, aes(x = factor(n_student), y = pretest)) +
geom_boxplot(width = .5)
ggplot(dataset, aes(x = factor(n_student), y = pretest)) +
geom_boxplot(outlier.size = 1.5, outlier.shape = 21)
ggplot(dataset, aes(x = 1, y = pretest)) +geom_boxplot() +scale_x_continuous(breaks = NULL) +theme(axis.title.x = element_blank())
ggplot(dataset, aes(x = factor(race), y = bwt)) +
geom_boxplot(notch = TRUE)
ggplot(dataset, aes(x = factor(pretest), y = bwt)) +geom_boxplot(notch = TRUE)
ggplot(dataset, aes(x = factor(pretest), y = pretest)) +geom_boxplot(notch = TRUE)
ggplot(dataset, aes(x = factor(n_student), y = pretest)) +geom_boxplot(notch = TRUE)
ggplot(dataset, aes(x = factor(n_student), y = pretest)) +geom_boxplot() +stat_summary(fun.y = "mean", geom = "point", shape = 23, size = 3,
fill = "white")
ggplot(dataset, aes(x = factor(n_student), y = pretest)) +geom_boxplot() +stat_summary(fun = "mean", geom = "point", shape = 23, size = 3,
fill = "white")
ggplot(dataset, aes(x = gender, y = student_id))+geom_violin()
ggplot(dataset, aes(x = pretest, y = n_students))+geom_violin()
ggplot(dataset, aes(x = pretest, y = n_student))+geom_violin()
geom_violin() +geom_boxplot(width = .1, fill = "black", outlier.colour = NA) +
stat_summary(fun= median, geom = "point", fill = "white", shape = 21,
size = 2.5)
data6 <- ggplot(dataset, aes(x = pretest, y = n_student))
data6+geom_violin()
data6+geom_violin() +geom_boxplot(width = .1, fill = "black", outlier.colour = NA) +
stat_summary(fun= median, geom = "point", fill = "white", shape = 21,
size = 2.5)
data6+geom_violin(trim = FALSE)
data6 +geom_violin(scale = "count")
# More smoothing
data6+geom_violin(adjust = 2)
# Less smoothing
data6 +geom_violin(adjust = .5)
150
# Save a modified data set that only includes of males data for marks that contains > 50
data7 <- dataset %>%
filter(gender == "Male" & pretest > 50)
# Save a modified data set that only includes of males data for marks that contains > 50
data7 <- dataset %>%
filter(gender == "Male" & pretest > 50)
# Create a base ggplot object using `data7`, called `data7_p` (for data7 plot)
data7_p <- ggplot(data7, aes(x = pretest))data7_p +geom_dotplot()
# Create a base ggplot object using `data7`, called `data7_p` (for data7 plot)
data7_p<-ggplot(data7,aes(x = pretest)) data7_p +geom_dotplot()
# Create a base ggplot object using `data7`, called `data7_p` (for data7 plot)
data8<-ggplot(data7,aes(x = pretest)) data8 +geom_dotplot()
# Create a base ggplot object using `data7`, called `data7_p` (for data7 plot)
data8 <- ggplot(data7,aes(x=pretest)) data8 +geom_dotplot()
# Create a base ggplot object using `data7`, called `data7_p` (for data7 plot)
data8 <- ggplot(data7,aes(x=pretest)) data8+geom_dotplot()
# Create a base ggplot object using `data7`, called `data7_p` (for data7 plot)
data8 <- ggplot(data7,aes(x=pretest))+geom_dotplot()
# Create a base ggplot object using `data7`, called `data7_p` (for data7 plot)
data8 <- ggplot(data7,aes(x=pretest))
data8+geom_dotplot()
data8 +
geom_dotplot(binwidth = .25, stackdir = "center") +
scale_y_continuous(breaks = NULL) +
theme(axis.title.y = element_blank())
data8 +
geom_dotplot(binwidth = .25, stackdir = "centerwhole") +
scale_y_continuous(breaks = NULL) +
theme(axis.title.y = element_blank())
ggplot(dataset, aes(x = gender, y = n_student)) +
geom_dotplot(binaxis = "y", binwidth = .5, stackdir = "center")
ggplot(dataset, aes(x = gender, y = n_student)) +
geom_boxplot(outlier.colour = NA, width = .4) +
geom_dotplot(binaxis = "y", binwidth = .5, stackdir = "center", fill = NA)
6.11
ggplot(dataset, aes(x = gender, y = n_student)) +
geom_boxplot(aes(x = as.numeric(gender) + .2, group = gender), width = .25) +geom_dotplot(aes(x = as.numeric(gender) - .2, group = gender),
binaxis = "y",
binwidth = .5,
stackdir = "center"
) +
scale_x_continuous(
breaks = 1:nlevels(dataset$gender),
labels = levels(dataset$gender)
)
|
ggplot(dataset, aes(x = gender, y = n_student)) +
geom_boxplot(aes(x = as.numeric(gender) + .2, group = gender), width = .25) +geom_dotplot(aes(x = as.numeric(gender) - .2, group = gender),
binaxis = "y",
binwidth = .5,
stackdir = "center"
) +
scale_x_continuous(
breaks = 1:nlevels(dataset$gender),
labels = levels(dataset$gender)
)
ggplot(dataset, aes(x = pretest, y = n_student)) +
geom_boxplot(aes(x = as.numeric(gender) + .2, group = gender), width = .25) +geom_dotplot(aes(x = as.numeric(gender) - .2, group = gender),binaxis = "y",binwidth = .5,stackdir = "center") +scale_x_continuous(breaks = 1:nlevels(dataset$gender),labels=levels(dataset$gender)
)
ggplot(dataset, aes(x = pretest, y = n_student)) +
geom_boxplot(aes(x = as.numeric(pretest) + .2, group = pretest), width = .25) +geom_dotplot(aes(x = as.numeric(pretest) - .2, group = pretest),binaxis = "y",binwidth = .5,stackdir = "center") +scale_x_continuous(breaks = 1:nlevels(dataset$pretest),labels=levels(dataset$pretest)
)
# Save a base plot object
data9 <- ggplot(dataset, aes(x = pretest, y = posttest)) data9+geom_point() +stat_density2d()
# Save a base plot object
data9<-ggplot(dataset, aes(x = pretest, y = posttest)) data9+geom_point() +stat_density2d()
# Save a base plot object
ggplot(dataset, aes(x = pretest, y = posttest)) data9+geom_point() +stat_density2d()
# Save a base plot object
ggplot(dataset, aes(x = pretest, y = posttest)) data9+geom_point() +stat_density2d()
# Save a base plot object
ggplot(dataset, aes(x = pretest, y = posttest))+geom_point() +stat_density2d()
# Contour lines, with "height" mapped to color
data9+stat_density2d(aes(colour = ..level..))
# Save a base plot object
ggplot(dataset, aes(x = pretest, y = posttest))+geom_point() +stat_density2d()
# Contour lines, with "height" mapped to color
ggplot(dataset, aes(x = pretest, y = posttest))+geom_point() +stat_density2d()+stat_density2d(aes(colour = ..level..))
# Map density estimate to fill color
ggplot(dataset, aes(x = pretest, y = posttest))+geom_point() +stat_density2d()+stat_density2d(aes(fill = ..density..), geom = "raster", contour = FALSE)
# With points, and map density estimate to alpha
faithful_p +
geom_point() +
stat_density2d(aes(alpha = ..density..), geom = "tile", contour = FALSE)
# Map density estimate to fill color
ggplot(dataset, aes(x = pretest, y = posttest))+geom_point() +stat_density2d()+stat_density2d(aes(fill = ..density..), geom = "raster", contour = FALSE)
# With points, and map density estimate to alpha
ggplot(dataset, aes(x = pretest, y = posttest))+geom_point() +stat_density2d()geom_point() +stat_density2d(aes(alpha = ..density..), geom = "tile", contour = FALSE)
# Map density estimate to fill color
ggplot(dataset, aes(x = pretest, y = posttest))+geom_point() +stat_density2d()+stat_density2d(aes(fill = ..density..), geom = "raster", contour = FALSE)
# With points, and map density estimate to alpha
ggplot(dataset, aes(x = pretest, y = posttest))+geom_point() +stat_density2d()+geom_point() +stat_density2d(aes(alpha = ..density..), geom = "tile", contour = FALSE)
data9 <- dataset %>%
filter(gender == "Male") %>%
mutate(n_students = if_else(pretest >= 50))
data9 <- dataset %>%
filter(gender == "Male") %>%
mutate(n_students = if(pretest >= 50))
ggplot(dataset, aes(x = gender, y = n_student)) +
geom_area(aes(fill = pretest)) +
geom_line() +
geom_hline(yintercept = 0)
ggplot(dataset, aes(x = pretest, y = n_student)) +geom_area(aes(fill = pretest)) +geom_line() +geom_hline(yintercept = 0)
render("EDA-LA01.Rmd")
head(order(dataset),n=100)
head(rank(dataset$student_id),n=50) #rank on test course preparation
head(rank(dataset$school_type),n=50)              #rank on math score
render("EDA-LA01.Rmd")
head(fct_drop(dataset2$gender),n=20)
data4 <- dataset
head(data4 %>% mutate(n_student=n_student*2),n=20)
render("EDA-LA01.Rmd")
render("EDA-LA01.Rmd")
render("EDA-LA01.Rmd")
install.packages("corrplot")
library(corrplot)
head(mtcars)
M<-cor(mtcars)
head(roud(M,2))
head(round(M,2))
corrplot(corr,method = "circle")
corrplot(cor,method = "circle")
corrplot(M,method = "circle")
corrplot(M,method = "square")
corrplot(M,method = "shade")
